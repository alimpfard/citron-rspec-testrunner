import 
    Test: 'describe'.

describe Some examples do: {:it
    it can pass do: {
        (1 + 1) should = 2.     
    }.

    it can fail do: {
        (1 + 1) should = 3.     
    }.

    it can pass after failing do: {
        (1 + 2) should = 3. 
    }.
    
    it can catch errors do: {
        { thisBlock error: AssertionError['test']. }
            should raiseError: AssertionError.
    }.
}.

describe let do: {:it:let
    let[Reflect thisContext] constant-ref { Dice rawRandomNumber }.

    it has some value do: {
        constant-ref should not = Nil.
    }.
    it ~ 'is persistent across references' do: {
        constant-ref should = constant-ref.
    }.
}.

describe output do: {:it:let
    it can assert about outputs do: {
        { Pen writeln: 'Testing'. }
            should output: 'Testing\n'.
    }.
    
    let[Reflect thisContext] somefile { File new: 'test', open: 'r+' }.

    it can fail! do: {
        { somefile write: 'some test'. }
            should output: 'not this one' to: somefile.
    }.
}.


var User is Object cnew: {
    on: 'initWithName:' do: {:name
        name => name.
    }.
    
    on: 'name' do: { ^my name. }.
}.

describe User do: {:it
    it knows its own name do: {
        var user is User new initWithName: 'Alice'.
        user name should = 'Alice'.
    }.
}.
