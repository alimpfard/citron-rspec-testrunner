import 
    Library/Control/Error/AssertionError
    Library/Utils/Colors: 'Colors'.

var describe is Slurp new.
var It is Slurp new.
It on: 'do:' do: {:blk
    var description is me obtain.
    Pen write: ' - ' + description.
    {
        blk run.
        Pen green writeln: ' (ok)', resetColor.
    } catch: {:e
        Pen red writeln: ' (fail)', resetColor.
        Pen red writeln: '\t* Backtrace:', resetColor.
        Pen writeln: (
            Reflect stackTrace 
                split: '\n', 
                do shift shift shift shift done reverse
                fmap: \:x '\t${{Colors red}}$|${{Colors default}}$ $$x',
                join: '\n'
        ).
        Pen write: '\t${{Colors red}}$* ${{Colors magenta}}$$$e', resetColor brk.
    } type: AssertionError, run.
}.

describe on: 'do:' do: {:blk
    var description is me obtain.
    Pen writeln: description.

    blk applyTo: const It.
}.

var ComparisonAssertion is Object cnew: {
    on: 'new:' do: {:actual
        ^cnew: {
            actual => actual.
        }.
    }.
    on: '=' do: {:expected
        my actual = expected ifFalse: {
            thisBlock error: AssertionError['Expected ${{expected}}$ but got ${{my actual}}$'].
        }.
    }.
    on: 'raiseError:' do: {:error_type
        var actual is my actual.
        var okay is False.
        {
            {
                actual run.
            } catch: {
                okay is True.
            } type: error_type, run.
        
        } catch: {:e
            thisBlock error: AssertionError['Expected to see error ${{error_type type}}$, but got ${{e type}}$'].
        }, run.
        okay ifTrue: { ^Nil. }.

        thisBlock error: AssertionError['Expected to see error ${{error_type type}}$, but got no errors'].
    }.
}.

Object on: 'should' do: {
    ^const ComparisonAssertion new: me.
}.
